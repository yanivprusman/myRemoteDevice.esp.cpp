// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { actions } from '../the-mrdname-space/actions.js';
import { types } from '../the-mrdname-space/types.js';
export class MRD {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMRD(bb, obj) {
        return (obj || new MRD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMRD(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MRD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : types.server;
    }
    action() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : actions.getPage;
    }
    data(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startMRD(builder) {
        builder.startObject(3);
    }
    static addType(builder, type) {
        builder.addFieldInt8(0, type, types.server);
    }
    static addAction(builder, action) {
        builder.addFieldInt8(1, action, actions.getPage);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(2, dataOffset, 0);
    }
    static endMRD(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMRDBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMRDBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMRD(builder, type, action, dataOffset) {
        MRD.startMRD(builder);
        MRD.addType(builder, type);
        MRD.addAction(builder, action);
        MRD.addData(builder, dataOffset);
        return MRD.endMRD(builder);
    }
}
